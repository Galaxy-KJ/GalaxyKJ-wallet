#![no_std]
//! Hello World smart contract for Soroban (Stellar).
//!
//! This minimal contract demonstrates a simple function that returns a vector
//! containing the greeting "Hello" and a user-supplied name.
//!
//! Usage overview:
//! - Build: `stellar contract build`
//! - Test locally (Rust unit tests): `cargo test`
//! - Invoke via client code: use the generated `ContractClient`.
//! - Invoke via CLI (example):
//!   `stellar contract invoke --id <CONTRACT_ID> --fn hello --arg <NAME>`
//!
//! Notes:
//! - `Env` is provided by Soroban and represents the contract execution environment.
//! - `ContractClient` is auto-generated by soroban-sdk for contracts annotated with `#[contract]`.
//! - See Soroban docs for deployment and network configuration details.
use soroban_sdk::{contract, contractimpl, vec, Env, String, Vec};

#[contract]
/// Hello World example contract.
pub struct Contract;

#[contractimpl]
impl Contract {
    /// Returns a greeting and the provided name.
    ///
    /// Parameters:
    /// - `env`: Contract execution environment provided by Soroban.
    /// - `to`: Name or identifier to greet.
    ///
    /// Returns:
    /// - `Vec<String>` containing two elements: `"Hello"` and `to`.
    ///
    /// Example (client usage):
    /// ```rust
    /// use soroban_sdk::{Env, String};
    /// // Assume `Contract` is deployed and we have its ID
    /// let env = Env::default();
    /// let contract_id = env.register(Contract, ());
    /// let client = ContractClient::new(&env, &contract_id);
    /// let result = client.hello(&String::from_str(&env, "Dev"));
    /// // result == ["Hello", "Dev"]
    /// ```
    ///
    /// Example (CLI invocation):
    /// ```text
    /// stellar contract invoke \
    ///   --id <CONTRACT_ID> \
    ///   --fn hello \
    ///   --arg "Dev"
    /// ```
    pub fn hello(env: Env, to: String) -> Vec<String> {
        vec![&env, String::from_str(&env, "Hello"), to]
    }
}

mod test;
